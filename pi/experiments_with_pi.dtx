%\iffalse
%
%<driver>\ProvidesFile{pi.dtx}
%
%<*driver>
\listfiles
    \documentclass[oneside, a4paper]{ltxdoc}
    \usepackage{float}
    % Packages
    \usepackage[brazil]{babel}
    \usepackage[T1]{fontenc}
    \usepackage[utf8]{inputenc}
    \usepackage{hypdoc}
    \usepackage{microtype}
    %%
    % m_style repository:
    % https://github.com/guilhermeivo/m_style/
    \usepackage[section, maketitle]{m_style}
    \usepackage{listings}
    \newgeometry{
        top=3.0cm,
        bottom=1cm,
        left=3.5cm,
        right=2.0cm,
        footskip=1.5cm,
        includefoot
    }
    \usepackage{graphicx}
    \let\openbox\relax
    \usepackage{amsmath,amsthm}
    \usepackage{parskip}

    \usepackage{tikz}

    %
    %\CodelineIndex
    
    \makeatletter

    \renewcommand{\lstlistingname}{Código}
    \renewcommand{\lstlistlistingname}{Lista de \lstlistingname s}
    \lstdefinestyle{macrocode}{
        language = c,
        % Colors
        backgroundcolor = \color{white},
        rulesepcolor    = \color{darkgray}, 
        identifierstyle = \color{black},
        % Caracteres
        basicstyle       = \ttfamily\footnotesize,
        extendedchars    = true,
        showspaces       = false,
        showstringspaces = false,
        % Frame Style
        numbers         = left,
        tabsize         = 2,
        numberstyle     = \scriptsize,
        frame           = shadowbox,
        breaklines      = true,
        breakautoindent = true,
        xleftmargin     = 25pt,
        xrightmargin    = 25pt,
        aboveskip       = 10pt,
        belowskip       = 10pt,
        belowcaptionskip = 5pt,
        captionpos      = t,
        morekeywords    = {mpfr_t, mpz_t, fp_t},
        % Caracteres especiais
        literate =
        {á}{{\'a}}1 {é}{{\'e}}1 {í}{{\'i}}1 {ó}{{\'o}}1 {ú}{{\'u}}1
        {Á}{{\'A}}1 {É}{{\'E}}1 {Í}{{\'I}}1 {Ó}{{\'O}}1 {Ú}{{\'U}}1
        {à}{{\`a}}1 {è}{{\`e}}1 {ì}{{\`i}}1 {ò}{{\`o}}1 {ù}{{\`u}}1
        {À}{{\`A}}1 {È}{{\`E}}1 {Ì}{{\`I}}1 {Ò}{{\`O}}1 {Ù}{{\`U}}1
        {Ä}{{\"A}}1 {Ë}{{\"E}}1 {Ï}{{\"I}}1 {Ö}{{\"O}}1 {Ü}{{\"U}}1
        {â}{{\^a}}1 {ê}{{\^e}}1 {î}{{\^i}}1 {ô}{{\^o}}1 {û}{{\^u}}1
        {Â}{{\^A}}1 {Ê}{{\^E}}1 {Î}{{\^I}}1 {Ô}{{\^O}}1 {Û}{{\^U}}1
        {ã}{{\~a}}1 {ẽ}{{\~e}}1 {ĩ}{{\~i}}1 {õ}{{\~o}}1 {ũ}{{\~u}}1
        {Ã}{{\~A}}1 {Ẽ}{{\~E}}1 {Ĩ}{{\~I}}1 {Õ}{{\~O}}1 {Ũ}{{\~U}}1
        {ő}{{\H{o}}}1 {Ő}{{\H{O}}}1
        {ç}{{\c c}}1 {Ç}{{\c C}}1
    }

    \hypersetup{
        colorlinks = true,
        allcolors = black,
        pdftitle = {\@title},
        pdfauthor = {\@author},
        pdfcreator = {\LaTeX}
    }

    \makeatother
    \lstdefinestyle{docstrip}{
        style=macrocode
    }

    \title{Experimentos usando Pi}
    \accessin{\url{https://github.com/guilhermeivo/computing-projects/}}

    \begin{document}
        \maketitle\pagenumbering{arabic}
        \DocInput{\jobname.dtx}
    \end{document}
%</driver>
%\fi
%
%\iffalse
%<*c>
/*********************************************************************/
/**                                                                 **/
/**   Pi number                                                     **/
/**                                                                 **/
/**   guilhermeivo                                                  **/
/**                                                                 **/
/*********************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <gmp.h>
#include <mpfr.h>
#include "../timeclock.h"

#define USE_MPFR
//#define USE_MPF // nao usa metodos de arredondamento

#ifdef USE_MPFR
    #define DEFAULT_ROUND MPFR_RNDN

    #define fp_set_default_prec mpfr_set_default_prec
    #define fp_get_prec mpfr_get_prec

    #define fp_init mpfr_init
    #define fp_inits mpfr_inits

    #define fp_set_ld(rop, op) mpfr_set_ld(rop, op, DEFAULT_ROUND)
    #define fp_set_ui(rop, op) mpfr_set_ui(rop, op, DEFAULT_ROUND)
    #define fp_set_z(rop, op) mpfr_set_z(rop, op, DEFAULT_ROUND)

    #define fp_add(rop, op1, op2) mpfr_add(rop, op1, op2, DEFAULT_ROUND)
    #define fp_sub(rop, op1, op2) mpfr_sub(rop, op1, op2, DEFAULT_ROUND)
    #define fp_div(rop, op1, op2) mpfr_div(rop, op1, op2, DEFAULT_ROUND)

    #define fp_mul_ui(rop, op1, op2) mpfr_mul_ui(rop, op1, op2, DEFAULT_ROUND)

    #define fp_clear mpfr_clear
    #define fp_clears mpfr_clears

    typedef mpfr_t fp_t; // Floating-point Type
#else
    #define fp_set_default_prec mpf_set_default_prec
    #define fp_get_prec mpf_get_prec

    #define fp_init mpf_init
    #define fp_inits mpf_inits

    #define fp_set_ld(rop, op) mpf_set_d(rop, op)
    #define fp_set_ui(rop, op) mpf_set_ui(rop, op)
    #define fp_set_z(rop, op) mpf_set_z(rop, op)

    #define fp_add(rop, op1, op2) mpf_add(rop, op1, op2)
    #define fp_sub(rop, op1, op2) mpf_sub(rop, op1, op2)
    #define fp_div(rop, op1, op2) mpf_div(rop, op1, op2)

    #define fp_mul_ui(rop, op1, op2) mpf_mul_ui(rop, op1, op2)

    #define fp_clear mpf_clear
    #define fp_clears mpf_clears

    typedef mpf_t fp_t; // Floating-point Type
#endif

%</c>
%\fi
%
%\begin{quote}
%Queremos implementar algoritmos para calcular o valor de $\pi$ usando métodos computacionais.
%\end{quote}
%
%\nocite{aocc-user-guide}
%
%\phantomsection%
%\addcontentsline{toc}{section}{\protect\numberline{}Pi usando Monte Carlo}
%\section*{Pi usando Monte Carlo}
%
%O método de Monte Carlo é uma técnica de amostragem estatística, teve seu desencadeamento após o desenvolvimento do \textit{ENIAC}\footnote{O ENIAC produziu $2{,}037$ dígitos de $\pi$ em $70$ horas em $1949$ usando a \textit{Fórmula de Machin\index{John Machin!Fórmula de Machin}}\cite[p.~592 e 627]{pi-source-book}}, primeiro computador eletrônico, desenvolvido durante a Segunda Guerra Mundial, para lidar com grandes cálculos. O método baseia-se em números ``aleatórios'' para resolver os seus problemas, que é aplicado com sucesso em diversos problemas contemporâneos \cite{special-issue}.
%
%\begin{macro}{monteCarlo()}
%O problema consiste em montar um quadrado de comprimento $1$, e $1/4$ de uma circunferência inscrita nesse quadrado e, de forma aleatória, disparar pontos dentro do espaço.
%
%\begin{figure}[H]
%\noindent\begin{minipage}{0.45\textwidth}
%   \centering
%   \begin{tikzpicture}
%       \begin{scope}
%           \clip(0, 0) rectangle (3, 3);
%           \draw [fill=gray!7] (0, 0) circle (3);
%       \end{scope}
%
%       \draw [fill=black,draw=none] (0.35, 2.15) circle (0.1);
%       \draw [fill=black,draw=none] (1.5, 1) circle (0.1);
%       \draw [fill=black,draw=none] (1.6, 0.5) circle (0.1);
%       \draw [fill=black,draw=none] (2, 0.35) circle (0.1);
%       \draw [fill=black,draw=none] (2.65, 2.45) circle (0.1);
%
%       \draw (3, 3) rectangle (0,0);
%   \end{tikzpicture}%
%\end{minipage}%
%\hfill%
%\begin{minipage}{0.45\textwidth}
%   \begin{equation*}
%   \begin{split}
%       A=\pi\cdot R^{2}\Longrightarrow A=\pi \\
%       A_{c}=\frac{\pi}{4}\approx4\cdot\frac{\text{dentro}}{\text{total}}=\pi
%   \end{split}
%   \end{equation*}%
%\end{minipage}%
%\end{figure}%
%
%\iffalse
%<*c>
/**
 * @brief calcula o valor de pi usando o metodo de Monte Carlo
 * 
 * @param n quantidade de iteracoes desejado
 * @return long double pi
 */
%</c>
%\fi
%    \begin{lstlisting}[style=macrocode,escapechar=\%,numbers=none]
long double monteCarlo(unsigned long long n) {
    unsigned long long ins;  
    ins = 0;  
    long double x, y, z, pi;

    srand(time(NULL));
    unsigned long long i;
    for (i = 0; i < n; i++) {
        x = (long double) rand() / (long double) RAND_MAX;
        y = (long double) rand() / (long double) RAND_MAX;

        z = x * x + y * y;
        if (z <= 1) {
            ins++;
        }
    }

    pi = (long double) 4 * ins;
    pi = (long double) pi / (long double) n;

    return pi;
}
%   \end{lstlisting}
% \end{macro}
%\iffalse
%<*c>

%</c>
%\fi
%
%\input{content/pi-at-monte-carlo-result.tex}
%
%\cleardoublepage
%\phantomsection%
%\addcontentsline{toc}{section}{\protect\numberline{}Desenvolvendo um Caso Geral}
%\section*{Desenvolvendo um Caso Geral}
%
%Para facilitar o desenvolvimento dos algoritmos para calcular $\arctg$, vamos realizar um caso geral, onde iremos adotar o valor para $x$ sendo igual a $1/a$, pois em todas as fórmulas utilizadas é usado $\arctg$ do tipo $\arctg{1/a}$.
%Então, podemos desenvolver a série da função $\arctg$ da seguinte maneira:
%
%\begin{center}
%\begin{tabular}{rcl}
%   \(S_n\)&\(=\)&\(1+r+r^{2}+\cdots+r^{n}\) \\ 
%   \(-\;r\cdot S_n\)&\(=\)&\(r+r^{2}+\cdots+r^{n}+r^{n+1}\) \\ 
%   \hline
%   \(S_n-rS_n\)&\(=\)&\(1-r^{n+1}\)
%\end{tabular}
%\end{center}
%
%\begin{equation*}
%\begin{gathered}
%\Longrightarrow S_n=\frac{1-r^{n+1}}{1-r} \\
%\lim_{n\to\infty}S_n=\left\{\begin{array}{l}
%\dfrac{1}{1-r}\text{,}\;\lvert r\rvert<1 \\
%\text{diverge, caso contrário}
%\end{array}\right.
%\end{gathered}
%\end{equation*}
%
%\begin{equation}
%\begin{gathered}
%S_n=\sum\limits_{k=0}^{n}r^{n}=1+r+r^{2}+\cdots+r^{n} \\
%\therefore\quad\left\{r^{n}\right\}_{n=0}^{\infty}=\lim_{n\to\infty}\sum\limits_{k=0}^{n}r^{n}=\sum\limits_{n=0}^{\infty}r^{n}=\frac{1}{1-r}\text{,}\quad\lvert r\rvert<1\;\forall r\in\mathbb{R}
%\tag{Série Geométrica}
%\end{gathered}
%\end{equation}
%
%Considerando \(r=-x^{2}\) e desenvolvendo pelo teorema de diferenciação e integração para séries de potências, temos
%
%\begin{equation*}
%\begin{gathered}
%\sum\limits_{n=0}^{\infty}(-1)^{n}x^{2n}=\frac{1}{1+x^{2}} \\
%\Longrightarrow\sum\limits_{n=0}^{\infty}\left((-1)^{n}\int x^{2n}\;dx\right)+\text{cte}=\int\frac{1}{1+x^{2}}\;dx \\
%\Longrightarrow\sum\limits_{n=0}^{\infty}(-1)^{n}\frac{x^{2n+1}}{2n+1}+\text{cte}=\arctg{x} \\
%\end{gathered}
%\end{equation*}
%
%Para \(x=0\), temos \(\arctg{x}=0\),
%
%\begin{equation}\label{arctan_series}
%\therefore\quad\arctg{x}=\sum\limits_{n=0}^{\infty}(-1)^{n}\frac{x^{2n+1}}{2n+1}\text{,}\quad\lvert x\rvert<1\;\forall x\in\mathbb{R}
%\end{equation}
%
%Sendo uma série alternada, podemos reescrever a série com estimativa do erro
%
%\begin{equation*}
%\begin{split}
%\arctg{x}\approx S_n&=\sum_{k=0}^{n}\left(-1\right)^k\frac{x^{2k+1}}{2k+1}+R_n(x)\text{, substituindo}\;x=1/a \\ 
%&=\underbrace{\sum_{k=0}^{n}\left(\left(-1\right)^k\frac{1}{a^{2k+1}}\cdot\frac{1}{2k+1}\right)}_{\displaystyle P_n\left(1/a\right)}+R_n\left(1/a\right)
%\end{split}
%\end{equation*}%
%
%\begin{multline*}
%P_n\left(\frac{1}{a}\right)=\frac{1}{a}-\frac{1}{3a^3}+\frac{1}{5a^5}+\frac{1}{7a^7}-\frac{1}{9a^9}+\frac{1}{11a^{11}}+\cdots+\underbrace{\frac{1}{\left(2n+1\right)\cdot a^{2n+1}}}_{b_n}-\underbrace{\frac{1}{\left(2n+3\right)\cdot a^{2n+3}}}_{b_{n+1}}
%\end{multline*}
%
%Observando o aparecimento de uma série telescópica e otimizando para o desenvolvimento computacional, temos
%
%\begin{equation*}
%\begin{split}
%b_n-b_{n+1}&=\frac{1}{\left(2n+1\right)\cdot a^{2n+1}}-\frac{1}{\left(2n+3\right)\cdot a^{2n+3}} \\
%&=\frac{\left(2n+3\right)\cdot a^{2n+3}-\left(2n+1\right)\cdot a^{2n+1}}{\left(2n+1\right)\cdot a^{2n+1}\cdot\left(2n+3\right)\cdot a^{2n+3}} \\
%&=\frac{\left(2n+3\right)\cdot a^2-\left(2n+1\right)}{\left(2n+1\right)\cdot\left(2n+3\right)\cdot a^{2n+3}}\text{, usando que $n=2k$} \\
%&=\frac{\left(4k+3\right)\cdot a^2-\left(4k+1\right)}{\left(4k+1\right)\cdot\left(4k+3\right)\cdot a^{4k+3}}
%\end{split}
%\end{equation*}%
%
%\begin{equation*}
%\begin{split}
%P_n\left(1/a\right)&=\sum_{k=0}^{n}\frac{\left(4k+3\right)\cdot a^2-\left(4k+1\right)}{\left(4k+1\right)\cdot\left(4k+3\right)\cdot a^{4k+3}} \\
%&=\sum_{\substack{i=0 \\ i{+}{=}4}}^{n}\frac{\left(i+3\right)\cdot a^2-\left(i+1\right)}{\left(i+1\right)\cdot\left(i+3\right)\cdot a^{i+3}}
%\end{split}
%\end{equation*}%
%
%\begin{macro}{generalArctg()}
%
%\iffalse
%<*c>
/**
 * @brief calcula o valor de pi usando o metodo de Monte Carlo
 * 
 * @param n quantidade de iteracoes desejado
 * @return long double pi
 */
%</c>
%\fi
%    \begin{lstlisting}[style=macrocode,escapechar=\%]
long double generalArctg(unsigned long int n, unsigned long int a) {
    unsigned long int pow, aux_pow, numerator, quotient;
    long double res;

    pow = a * a * a;
    aux_pow = a * a * a * a;
    res = 0;

    int i;
    for (i = 0; i < n; i+=4) {
        numerator = (unsigned long int) (i + 3) * (a * a) - (i + 1);
        quotient = (unsigned long int) (i + 1) * (i + 3) * pow;
        res += (long double) numerator / (long double) quotient;

        pow *= aux_pow;
    }

    return res;
}
%   \end{lstlisting}
% \end{macro}
%\iffalse
%<*c>

%</c>
%\fi
%
%Desenvolvendo o resto
%
%\begin{equation*}
%\begin{split}
%\lvert R_n\rvert&\leq\frac{1}{a^{2n+3}}\cdot\frac{1}{2n+3} \\
%\frac{1}{a^{2n+3}}\cdot\frac{1}{2n+3}&<\frac{1}{a^{2\cdot\left(n+1\right)}}\cdot\frac{1}{2\cdot\left(n+1\right)}\overset{?}{<}\epsilon \\
%\frac{1}{\epsilon}\cdot\frac{1}{2a}&<a^{2\cdot\left(n+1\right)}\cdot\left(n+1\right)
%\end{split}
%\end{equation*}%
%
% Como $\epsilon=10^{-d}$, tem-se: $\displaystyle 10^{d}\cdot\frac{A}{2a}<a^{2\cdot\left(n+1\right)}\cdot\left(n+1\right)$, sendo $n$ então a quantidade de iterações necessárias e $A$ o valor de contração/expansão no eixo y da função.
%
% \begin{macro}{generalErrorHandle()}
%\iffalse
%<*c>
/**
 * @brief Erro para o calculo do A*arctg(1/a)
 * 
 * @param d expoente usado para o erro
 * @param A valor a ser multiplicado
 * @param a quociente do valor do arctg
 * @return unsigned long int quantidade de iteracoes necessarias 
 * para o erro
 */
%</c>
%\fi
%    \begin{lstlisting}[style=macrocode,escapechar=\%]
unsigned long int generalErrorHandle(unsigned long int d, unsigned long int A, unsigned long int a) {
    unsigned long int n, err, small, pow, aux_pow;

    n = 0;
    err = 1;

    aux_pow = a * a;
    pow = aux_pow;

    int i;
    for (i = 0; i < d; i++) {
        err *= 10;
    }

    small = err * A / (2 * a);

    while (small >= (unsigned long int) pow * (n + 1)) {
        pow *= aux_pow;
        n++;
    }

    return n;
}
%    \end{lstlisting}
% \end{macro}
%\iffalse
%<*c>

%</c>
%\fi
%
%Porém, utilizando essas funções para $\pi/4=\arctg{(1)}$ alcançamos as limitações das representações utilizadas (\verb|unsigned long int| e \verb|long double|) ao tentar calcular para um $d$ grande, que no caso dos pontos flutuantes segue a norma específica para formatos e operações para aritmética em sistemas de computadores, IEEE 754\footnote{Representado na norma por \verb|binary64| dependendo da arquitetura da máquina.}\cite{ieee}. Então é necessário utilizar funções para cálculos de precisão arbitrária, sendo, nesse caso, utilizada a biblioteca \textit{GNU MPFR}, uma biblioteca \textit{C} para cálculos de ponto flutuante de precisão múltipla com arredondamento correto, e baseada na biblioteca \textit{GNU Multiple Precision Arithmetic} (\textit{GMP}).
%
%\phantomsection%
%\addcontentsline{toc}{subsection}{\protect\numberline{}Usando \textit{GNU MPFR} e \textit{GNU GMP}}
%\subsection*{Usando \textit{GNU MPFR} e \textit{GNU GMP}}\phantom{}
%Usaremos como prefixo ou sufixo nos nomes das funções e das variáveis \verb|fp| para caso use pontos flutuantes de valor arbitrário em sua composição e o prefixo ou sufixo \verb|gmp| para caso use valores inteiros de valor arbitrário.
%
%\begin{macro}{generalArctg\_mpfr()}
%Substituindo os tipos tradicionais pelos utilizados nas bibliotecas, temos:
%
%\iffalse
%<*c>
/**
 * @brief calcula o valor do arctg(1/a) com n iteracoes usando o 
 * pacote gmp
 * 
 * @param n quantidade de iteracoes desejado
 * @param a quociente do valor do arctg
 * @param res arctg(1/a)
 */
%</c>
%\fi
%    \begin{lstlisting}[style=macrocode,escapechar=\%]
void generalArctg_fp(const mpz_t n, unsigned long int a, fp_t res) {
    fp_set_ui(res, 0);

    mpz_t i, i_1, i_3, aux_pow_4, aux_pow_2, pow, a_gmp, numerator, quotient;
    mpz_inits(i, i_1, i_3, aux_pow_4, aux_pow_2, pow, a_gmp, numerator, quotient, NULL);

    mpz_set_ui(a_gmp, a);
    mpz_pow_ui(aux_pow_4, a_gmp, 4); // aux = a^4
    mpz_pow_ui(aux_pow_2, a_gmp, 2); // aux = a^4
    mpz_pow_ui(pow, a_gmp, 3); // pow = a^3

    fp_t frac, numerator_fp, quotient_fp;
    fp_inits(frac, numerator_fp, quotient_fp, NULL);

    for (mpz_set_ui(i, 0); mpz_cmp(i, n) < 0; mpz_add_ui(i, i, 4)) { // for (int i = 0; i < n; i+=4) {...}
        mpz_add_ui(i_1, i, 1); // i + 1
        mpz_add_ui(i_3, i, 3); // i + 3

        // numerator
        mpz_mul(numerator, i_3, aux_pow_2); // (i + 3) * a^2
        mpz_sub(numerator, numerator, i_1); // (i + 3) * a^2 - (i + 1)

        // quocient
        mpz_mul(quotient, i_1, i_3); // (i + 1) * (i + 3)
        mpz_mul(quotient, quotient, pow); // (i + 1) * (i + 3) * a^{i+3}

        fp_set_z(numerator_fp, numerator);
        fp_set_z(quotient_fp, quotient);
        
        fp_div(frac, numerator_fp, quotient_fp); // frac = numerator / quotient
        fp_add(res, res, frac); // res += frac

        mpz_mul(pow, pow, aux_pow_4); // pow *= a^4
    }
    mpz_clears(i, i_1, i_3, aux_pow_4, aux_pow_2, pow, a_gmp, NULL);

    fp_clears(frac, numerator_fp, quotient_fp, NULL);
}
%    \end{lstlisting}
% \end{macro}
%\iffalse
%<*c>

%</c>
%\fi
%
% \begin{macro}{generalErrorHandle\_gmp()}
%\iffalse
%<*c>
/**
 * @brief Erro para o calculo do A*arctg(1/a)
 * 
 * @param d expoente usado para o erro
 * @param A valor a ser multiplicado
 * @param a quociente do valor do arctg
 * @param n quantidade de iteracoes necessarias para o erro
 */
%</c>
%\fi
%    \begin{lstlisting}[style=macrocode,escapechar=\%]
void generalErrorHandle_gmp(unsigned long int d, unsigned long int A, unsigned long int a, mpz_t n) {
    mpz_set_ui(n, 0);

    mpz_t err, aux_pow, pow, aux_cmp;
    mpz_inits(err, aux_pow, pow, aux_cmp, NULL);
    mpz_set_ui(err, 1);

    for (int i = 0; i < d; i++) {
        mpz_mul_ui(err, err, 10);
    }

    mpz_mul_ui(err, err, A);
    mpz_div_ui(err, err, 2 * a);

    mpz_set_ui(aux_pow, a);
    mpz_set(pow, aux_pow);

    mpz_set(aux_cmp, pow);
    mpz_mul(aux_cmp, aux_cmp, n);
    while (mpz_cmp(err, aux_cmp) > 0) {  // err >= aux_cmp
        mpz_mul(pow, pow, aux_pow);
        mpz_set(aux_cmp, pow);
        mpz_add_ui(n, n, 1);
        mpz_mul(aux_cmp, aux_cmp, n);
    }

    mpz_clears(err, aux_pow, pow, aux_cmp, NULL);
}
%    \end{lstlisting}
% \end{macro}
%\iffalse
%<*c>

/**
 * @brief 
 * 
 * @param arctg_a resultado do arctg
 * @param d expoente usado para o erro
 * @param A valor a ser multiplicado
 * @param a quociente do valor do arctg
 */
void generalArctgWithError_mpfr(fp_t arctg_a, unsigned long int d, unsigned long int A, unsigned long int a) {
    // A*arctg(1/a)
    mpz_t n_a;
    mpz_init(n_a);
    generalErrorHandle_gmp(d, A, a, n_a);

    fp_init(arctg_a);
    generalArctg_fp(n_a, a, arctg_a);
    fp_mul_ui(arctg_a, arctg_a, A);

    #ifdef __DEBUG__
        printf("\n");
        printf("%ld*arctg(1/%ld)=", A, a);
        #ifdef USE_MPFR
            mpfr_printf("%.*Rf\n", fp_get_prec(arctg_a), arctg_a);
        #else
            gmp_printf("%.*Ff\n", fp_get_prec(arctg_a), arctg_a);
        #endif
        gmp_printf("\tinteractions %Zd\n", n_a);
        printf("\n");
    #endif

    mpz_clear(n_a);
}

%</c>
%\fi
%
%\phantomsection%
%\addcontentsline{toc}{subsection}{\protect\numberline{}Fórmula de \textit{Machin} Original}
%\subsection*{Fórmula de \textit{Machin} Original}
%
%\begin{macro}{machin()}
%Função \verb|machin| resolvendo a \textit{Fórmula de Machin Original}:
%
%\begin{equation*}
%\frac{\pi}{4}=4\cdot\arctg{\frac{1}{5}}-\arctg{\frac{1}{239}}
%\end{equation*}
%
%    \begin{lstlisting}[style=macrocode,escapechar=\%]
void machin(unsigned long long err, fp_t pi) {
    fp_t arctg_5;
    generalArctgWithError_mpfr(arctg_5, err, 4, 5);

    fp_t arctg_239;
    generalArctgWithError_mpfr(arctg_239, err, 1, 239);

    fp_sub(pi, arctg_5, arctg_239);
    fp_mul_ui(pi, pi, 4);

    fp_clears(arctg_5, arctg_239, NULL);
}
%    \end{lstlisting}
% \end{macro}
%\iffalse
%<*c>

%</c>
%\fi
%
%\phantomsection%
%\addcontentsline{toc}{subsection}{\protect\numberline{}Fórmula de \textit{Kikuo Takano}}
%\subsection*{Fórmula de \textit{Kikuo Takano}}
%
%\begin{macro}{takano()}
%Função \verb|takano| resolvendo a \textit{Fórmula de Kikuo Takano}:
%
%\begin{equation*}
% \frac{\pi}{4}=12\cdot\arctg{\frac{1}{49}}+32\cdot\frac{1}{57}-5\cdot\frac{1}{239}+12\cdot\arctg{\frac{1}{110{.}443}} \tag{K. Takano, 1982}
%\end{equation*}
%
%\begin{lstlisting}[style=macrocode,escapechar=\%]
void takano(unsigned long long err, fp_t pi) {
    fp_t arctg_49;
    generalArctgWithError_mpfr(arctg_49, err, 12, 49);

    fp_t arctg_57;
    generalArctgWithError_mpfr(arctg_57, err, 32, 57);

    fp_t arctg_239;
    generalArctgWithError_mpfr(arctg_239, err, 5, 239);

    fp_t arctg_110443;
    generalArctgWithError_mpfr(arctg_110443, err, 12, 110443);

    fp_add(pi, arctg_49, arctg_57);
    fp_sub(pi, pi, arctg_239);
    fp_add(pi, pi, arctg_110443);
    fp_mul_ui(pi, pi, 4);

    fp_clears(arctg_49, arctg_57, arctg_239, arctg_110443, NULL);
}
%\end{lstlisting}
%\end{macro}
%\iffalse
%<*c>

%</c>
%\fi
%
%\begin{graphic}[H]
%   \centering
%   \caption{Tempo de evolução com o aumento da precisão do valor de \(\pi\) usando fórmula de \textit{Kikuo Takano}}
%   \includegraphics[width=0.95\columnwidth]{generated/timerun__plot}
%   Fonte: Elaborado pelo próprio autor
%   \label{fig:timerun__plot}
%\end{graphic}%
%
%\phantomsection%
%\addcontentsline{toc}{subsection}{Fórmula de \textit{Fredrik Carl M\"{u}lertz St{\o}rmer}}
%\subsection*{Fórmula de \textit{Fredrik Carl M\"{u}lertz St{\o}rmer}}
%
%\begin{macro}{stormer()}
%Função \verb|stormer| resolvendo a \textit{Fórmula de Fredrik Carl M\"{u}lertz St{\o}rmer}:
%
%\begin{equation*}
% \frac{\pi}{4}=44\cdot\arctg{\frac{1}{57}}+7\cdot\frac{1}{239}-12\cdot\frac{1}{682}+24\cdot\arctg{\frac{1}{12{.}943}} \tag{F. C. M. St{\o}rmer, 1896}
%\end{equation*}
%
%\begin{lstlisting}[style=macrocode,escapechar=\%]
void stormer(unsigned long long err, fp_t pi) {
    fp_t arctg_57;
    generalArctgWithError_mpfr(arctg_57, err, 44, 57);

    fp_t arctg_239;
    generalArctgWithError_mpfr(arctg_239, err, 7, 239);

    fp_t arctg_682;
    generalArctgWithError_mpfr(arctg_682, err, 12, 682);

    fp_t arctg_12943;
    generalArctgWithError_mpfr(arctg_12943, err, 24, 12943);

    fp_add(pi, arctg_57, arctg_239);
    fp_sub(pi, pi, arctg_682);
    fp_add(pi, pi, arctg_12943);
    fp_mul_ui(pi, pi, 4);

    fp_clears(arctg_57, arctg_239, arctg_682, arctg_12943, NULL);
}
%    \end{lstlisting}
% \end{macro}
%\iffalse
%<*c>

%</c>
%\fi
%
%\iffalse
%<*c>
int main(int argc, char* argv[]) {
    #ifdef DEBUG
        double start, stop;
    #endif
    unsigned long long err;
    char method = 'm'; // defalt value
    err = 100; 

    if(argc > 1) {
        method = argv[1][0];
        err = strtoull(argv[2], NULL, 10);
    }

    #ifdef DEBUG
        printf("method: %c\n", method);
        printf("error: %lld\n", err);
    #endif

    err += 5; // para garantir a quantidade de 100 casas decimais corretas
    fp_set_default_prec(err*5); // para garantir todos os calculos

    long double pi_double;
    pi_double = 0.0;
    fp_t pi;
    fp_init(pi);

    #ifdef DEBUG
        start = time_as_double();
    #endif
    switch (method) {
        case 'c':
            pi_double = monteCarlo(err);
            fp_set_ld(pi, pi_double);
            break;
        case 'm':
            machin(err, pi);
            break;
        case 't':
            takano(err, pi);
            break;
        case 's':
            stormer(err, pi);
            break;
        default:
            machin(err, pi);
    }
    #ifdef DEBUG
        stop = time_as_double();
    #endif

    if (pi_double > 0.0) {
        printf("%12.10Lf\n", pi_double);
    } else {
        #ifdef DEBUG
            printf("method is %c\n", method);
            #ifdef USE_MPFR
                mpfr_printf("%.*Rf\n", fp_get_prec(pi) / 5, pi);
            #else
                gmp_printf("%.*Ff\n", fp_get_prec(pi) / 5, pi);
            #endif
            
            printf("%5.15f segundos\n\n", (stop - start));
        #else
            #ifdef USE_MPFR
                mpfr_printf("%.*Rf\n", fp_get_prec(pi) / 5, pi);
            #else
                gmp_printf("%.*Ff\n", fp_get_prec(pi) / 5, pi);
            #endif
        #endif
    }

    fp_clear(pi);
    #ifdef USE_MPFR
        mpfr_free_cache();
    #endif

    return 0;
}
%</c>
%\fi
%
%
%\cleardoublepage\pagestyle{empty}\pagenumbering{gobble}
%\bibliographystyle{abnt}
%\bibliography{references}
%
%\include{content/appendix}
%
%\Finale
